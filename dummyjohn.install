#
#  Install Scriplet for DummyJohn at https://github.com/jradxl/dummyjohn
#  This Arch script for ArchLinux-DummyJohn at https://github.com/jradxl/archlinux-dummyjohn
#


## arg 1: the new package version
## These hooks are executed as shell scripts
## and so the arguments are $1, $2 etc.
pre_install()
{
    echo "==> Pre-install : Argument1 = " $1
}

## arg 1: the new package version
post_install()
{
  # Test present of group before creating if not exists
  getent group dummyjohn &>/dev/null || { echo "Adding Group dummyjohn"; groupadd -r dummyjohn; }

  # Test present of user before creating if not exists
  getent passwd dummyjohn &>/dev/null || { echo "Adding User dummyjohn"; useradd -r -g dummyjohn -M -d /opt/dummyjohn -c "DummyJohn Install and Service for testing" dummyjohn; }

  #Change permissions now that User and Group exist
  chown -R dummyjohn.dummyjohn /opt/dummyjohn
  chown -R dummyjohn.dummyjohn /var/log/dummyjohn

  ln -sf /var/log/dummyjohn /opt/dummyjohn/log
  ln -sf /opt/dummyjohn/config /etc/dummyjohn
  ln -sf /opt/dummyjohn/bin/console.sh /usr/bin/dummyjohn-console

  echo "==> Post-install : Argument1 = " $1
  echo "==> DummyJohn install completed."
}


## arg 1: the new package version
## arg 2: the old package version
pre_upgrade()
{
    echo "==> Pre-upgrade : Argument1 = " $1
    echo "==> Pre-upgrade : Argument2 = " $2
}

## arg 1: the new package version
## arg 2: the old package version
post_upgrade()
{
  echo "==> Post-upgrade : Argument1 = " $1 #New version
  echo "==> Post-upgrade : Argument2 = " $2 #Current version

  # Test present of group before creating if not exists
  getent group dummyjohn &>/dev/null || { echo "adding group ..."; groupadd -r dummyjohn; }

  # Test present of user before creating if not exists
  getent passwd dummyjohn &>/dev/null || { echo "adding user ..."; useradd -r -g dummyjohn -M -d /opt/dummyjohn -c "DummyJohn Install and Service for testing" dummyjohn; }

  # Remove extra groups and always force User dummyjohn to have a primary group of dummyjohn
  if [ $(groups dummyjohn | wc -w) -gt 1 ]; then
	  usermod -G "" dummyjohn
      echo "Removed extra groups for User dummyjohn"
  fi
  usermod -g dummyjohn dummyjohn

  chown -R dummyjohn.dummyjohn /opt/dummyjohn
  chown -R dummyjohn.dummyjohn /var/log/dummyjohn
}

## arg 1: the old package version
pre_remove()
{
  echo "==> Pre_remove : Argument1 = " $1

  if [ "$(ps aux | grep -e '^dummyjohn' | grep -v grep)" != "" ]; then
    echo -n "==> DummyJohn server is running. Stopping dummyjohn"
    systemctl stop dummyjohn.service
    while [ "$(ps aux | grep -e '^dummyjohn' | grep -v grep)" != "" ]; do
      sleep 1
    done
    echo "."
  fi
  rm -rf /etc/dummyjohn /usr/bin/dummyjohn-console /opt/dummyjohn/log || /bin/true
}

## arg 1: the old package version
post_remove()
{
  echo "==> Post_remove : Argument1 = " $1

  # Remove User and Group
  getent passwd dummyjohn &>/dev/null && { userdel dummyjohn && echo removed User dummyjohn; }
  #Depending on /etc/login.defs, usermod may have removed User's group.
  getent group dummyjohn &>/dev/null && { groupdel dummyjohn && echo removed Group dummyjohn; }
  
  if [ -d /opt/dummyjohn ]; then
    echo "==> dummyjohn directory is not empty and will not be removed."
    echo "    Please check path: '/opt/dummyjohn' and remove it manually."
  fi

  if [ -d /var/log/dummyjohn ]; then
    rm -rf /var/log/dummyjohn
  fi
}

